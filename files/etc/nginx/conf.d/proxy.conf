# Map of items not to cache
map $request_uri $nocache {
    ~InRelease 1;
    ~Release 1;
    ~Packages 1;
}

# Initialize our proxy cache.

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:30m inactive=3650d max_size=100g;

proxy_cache one;

proxy_cache_revalidate on;

proxy_cache_valid 3h;

# No cache for those entries
proxy_cache_bypass $nocache;
proxy_no_cache $nocache;

# Trim down the inputs to the proxy key hash. We want to ignore http vs https,
# which actual upstream server it was (we don't care; all mirrors are supposed
# to be the same).

proxy_cache_key "$request_uri";

proxy_next_upstream_timeout 3s;

proxy_cache_use_stale error timeout invalid_header updating;

proxy_next_upstream error timeout invalid_header http_404 http_500 http_502 http_503 http_504;

proxy_http_version 1.1;

add_header X-Cache-Status $upstream_cache_status;

server {
    listen 80 default_server;
    server_name _;
    # root !invalid;

    location /epel/ {
        proxy_pass http://ftp.linux.cz/pub/linux/fedora/epel/;
        proxy_set_header Host "ftp.linux.cz";
    }

    location /rocky/ {
        proxy_ssl_server_name on;
        proxy_pass https://ftp.linux.cz/pub/linux/rocky/;
    }

    location /centos/ {
        proxy_pass http://archive.kernel.org/centos-vault/;
        proxy_set_header Host "archive.kernel.org";
    }

    location /fedora/ {
        proxy_pass http://ftp.linux.cz/pub/linux/fedora/linux/;
        proxy_set_header Host "ftp.linux.cz";
    }

    location /debian/ {
        proxy_pass http://deb.debian.org/debian/;
        proxy_set_header Host "deb.debian.org";
    }

    location /debian-security/ {
        proxy_ssl_server_name on;
        proxy_pass https://deb.debian.org/debian-security/;
    }

    location /ubuntu/ {
        proxy_pass http://ftp.linux.cz/pub/linux/ubuntu/;
        proxy_set_header Host "ftp.linux.cz";
    }

    location /proxmox/ {
        proxy_pass http://download.proxmox.com/debian/;
        proxy_set_header Host "download.proxmox.com";
    }
}

# and finally, because we're running in a Docker container, log to stdout/stderr.

log_format simple '$request_uri $request_method $status $body_bytes_sent $upstream_cache_status';

access_log /dev/stdout simple;
error_log /dev/stderr;
